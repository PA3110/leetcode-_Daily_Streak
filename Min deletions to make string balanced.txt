Problem Link - https://leetcode.com/problems/minimum-deletions-to-make-string-balanced/description/

Problem - You are given a string s consisting only of characters 'a' and 'b'​​​​.
You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.
Return the minimum number of deletions needed to make s balanced.

Intuition - The goal is to make the string balanced by deleting the minimum number of characters. A string is considered balanced if there are no instances where a 'b' 
appears before an 'a'. To solve this problem, we'll use a dynamic programming approach. We'll keep track of the minimum deletions required up to each position in the 
string to ensure the string remains balanced. We can maintain two states:
a.The number of 'b's encountered so far.
b.The minimum deletions required if we convert the current character to 'a'.

Approach - 
1.Initialize variables to count the number of 'b's and to store the minimum deletions.
2.Traverse through the string.
3.For each character, update the count of 'b's if it's a 'b', otherwise update the minimum deletions considering the current character as 'a'.
4.Return the minimum deletions required after processing the entire string.

class Solution {
    public int minimumDeletions(String s) {
        int b_count = 0;
        int min_deletions = 0;
        
        for (char c : s.toCharArray()) {
            if (c == 'b') {
                b_count++;
            } else {
                min_deletions = Math.min(min_deletions + 1, b_count);
            }
        }
        
        return min_deletions;

    }
}