Problem Link - https://leetcode.com/problems/number-of-atoms/description/?envType=daily-question&envId=2024-07-14

Problem - Given a string formula representing a chemical formula, return the count of each atom. The atomic element always starts with an uppercase character, then zero 
or more lowercase letters, representing the name. One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no 
digits will follow. For example, "H2O" and "H2O2" are possible, but "H1O2" is impossible. Two formulas are concatenated together to produce another formula. For example, 
"H2O2He3Mg4" is also a formula. A formula placed in parentheses, and a count (optionally added) is also a formula. For example, "(H2O2)" and "(H2O2)3" are formulas.
Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by 
the second name (in sorted order), followed by its count (if that count is more than 1), and so on. The test cases are generated so that all the values in the output 
fit in a 32-bit integer.

Intuition - We essentially start from the back. Each time we encounter a number we add it to the stack. We can clearly see that going backwards, a number will always be 
preceeded by either ) or element. So in the same loop we first parse the number followed by the element/bracket. If a number is not seen, we take the default 1 as the 
number. We maintain the stack with the multipliers encountered and keep a multiplier variable to store the product. Upon poping the stack, we divide by this popped number.
Everytime we encounter a (, we pop the stack. We again pop the stack after each element is processed. We also use StringBuilder to optimize.

class Solution {
    Map<String, Integer> res = new TreeMap<>();
    Stack<Integer> stack = new Stack<>();
    int multiplier = 1;
    public String countOfAtoms(String formula) {
        int end = formula.length() - 1, i = formula.length() - 1;
        
        while (i >= 0) {
            if (formula.charAt(i) == '(') {
                multiplier /= stack.pop();
                i--;
                continue;
            }
            
            end = i;
            int val = 1;
            
            if (Character.isDigit(formula.charAt(i))) {
                while (Character.isDigit(formula.charAt(i))) i--;
                val = Integer.parseInt(formula.substring(i+1, end+1));
            } 
            stack.push(val);
            multiplier *= val;
            
            end = i;
            if (Character.isLetter(formula.charAt(i))) {
                while(Character.isLowerCase(formula.charAt(i))) i--;
                updateMap(formula.substring(i, end+1));
            }
            i--;
        }
        
        StringBuilder rs = new StringBuilder();
        for (Map.Entry<String, Integer> entry : res.entrySet()) {
            rs.append(entry.getKey());
            if (entry.getValue() > 1) rs.append(entry.getValue());
        }
        return rs.toString();
    }
    
    private void updateMap(String key) {
        if (res.get(key) == null) {
            res.put(key, multiplier);
        } else {
            res.put(key, multiplier + res.get(key));
        }

        multiplier /= stack.pop();
    
    }
}