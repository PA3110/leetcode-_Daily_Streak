Problem Link - https://leetcode.com/problems/sort-the-jumbled-numbers/description/?envType=daily-question&envId=2024-07-24

Problem - You are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should 
be mapped to digit j in this system. The mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with 
mapping[i] for all 0 <= i <= 9. You are also given another integer array nums. Return the array nums sorted in non-decreasing order based on the mapped values 
of its elements.

Notes:
Elements with the same mapped values should appear in the same relative order as in the input.
The elements of nums should only be sorted based on their mapped values and not be replaced by them

Intuition - 

Approach - 
The solution follows a mapping and sorting approach to achieve the final sorted array based on custom mapped values.
Firstly, the solution leverages a list called arr to store tuples. Each tuple contains two values: the mapped value of the number and the original index of the 
   number in the nums array.
Here is a step-by-step breakdown of the algorithm:
Iterate through each number in the nums array with its index. For each number x and its index i:
Initialize a variable y to be the mapped value of 0. This variable will accumulate the final mapped number. Note that if x is zero, we set y to mapping[0] as 
   its mapped value.
Initialize a variable k which represents the current digit's place value (e.g., 1 for units, 10 for tens, etc.).
For each digit v in the number x (obtained by repeatedly using divmod to split off the last digit):
Calculate the mapped digit by using the given mapping (i.e., mapping[v]).
Multiply the mapped digit by its current place value k and add it to y, building up the new mapped number digit by digit.
Multiply k by 10 to update the place value for the next digit to the left.
After finishing the mapping for a number, append a tuple (y, i) to the list arr, where y is the mapped value obtained and i is the index of the number in nums.
Sort the list arr by the first tuple element, which is the mapped value. Python's default sorting algorithm is stable, which guarantees that arr will be sorted 
   by y but maintain the relative order of elements that have the same y value.
Create the final sorted list by extracting and appending the original numbers from nums using the sorted indices found in arr: [nums[i] for _, i in arr].

import java.util.*;
class Solution {
    public int[] sortJumbled(int[] mapping, int[] nums) {
        // Get the length of the nums array.
        int n = nums.length;
      
        // Create a 2D array to store the mapped number and the original index.
        int[][] mappedWithIndex = new int[n][2];
      
        // Iterate over the array of numbers.
        for (int i = 0; i < n; ++i) {
            int originalNum = nums[i];   // Original number from nums.
            int mappedNum = originalNum == 0 ? mapping[0] : 0;  // Map the number based on mapping rules.
            int placeValue = 1;   // To reconstruct the mapped number based on individual digits.
          
            // Map each digit of the original number based on the 'mapping' array.
            while (originalNum > 0) {
                int digit = originalNum % 10;  // Retrieve the last digit.
                mappedNum += placeValue * mapping[digit];  // Map the digit and add to mappedNum considering the place value.
                placeValue *= 10;  // Move to the next place value (tens, hundreds, etc.).
                originalNum /= 10;  // Drop the last digit.
            }
          
            // Store the mapped number and the original index in the array.
            mappedWithIndex[i] = new int[] {mappedNum, i};
        }
      
        // Sort the array 'mappedWithIndex' based on the mapped numbers and indices.
        Arrays.sort(mappedWithIndex, (a, b) -> 
            a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]); // If mapped numbers are equal, compare index.
      
        // Prepare the final sorted array based on the mapped values.
        int[] sortedArray = new int[n];
        for (int i = 0; i < n; ++i) {
            sortedArray[i] = nums[mappedWithIndex[i][1]];
        }
      
        // Return the sorted array.
        return sortedArray;
    }
}