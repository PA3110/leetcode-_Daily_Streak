Problem Link - https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/description/?envType=daily-question&envId=2024-07-16

Problem - You are given the root of a binary tree with n nodes. Each node is uniquely assigned a value from 1 to n. You are also given an integer startValue representing the 
value of the start node s, and a different integer destValue representing the value of the destination node t.
Find the shortest path starting from node s and ending at node t. Generate step-by-step directions of such path as a string consisting of only the uppercase letters 'L', 'R', 
and 'U'. Each letter indicates a specific direction:
- 'L' means to go from a node to its left child node.
- 'R' means to go from a node to its right child node.
- 'U' means to go from a node to its parent node.
Return the step-by-step directions of the shortest path from node s to node t.

Intuition - We first need to find the Lowest Common Ancestor (LCA) of the two given nodes.
To find the LCA, we initiate a Depth-First Search (DFS) to establish parent-child relationships and record each node's height. Subsequently, we trace each node upwards 
step-by-step. We prioritize moving the node with the greater height first. When one node becomes the parent of the other or both nodes share the same parent, we identify 
the LCA.
After identifying the LCA, it serves as the root node from which we determine the path to both the start node and the destination node, respectively. Their paths are 
stored as firstPath and secondPath. This can be done with another DFS.
To construct the paths from the start node to the LCA and from the LCA to the destination node, we traverse from the start node upwards until we reach the LCA. We can 
firstPath entirely to U (indicating upward movements), and concatenate it with secondPath, which represents the path from the LCA to the destination node.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public String getDirections(TreeNode root, int startValue, int destValue) {
        TreeNode ancestor = lowestCommonAncestor(root, startValue, destValue);

        List<String> toStart = new ArrayList<>();
        getDirection(ancestor, startValue, new ArrayList<String>(), toStart);
        List<String> toDest = new ArrayList<>();
        getDirection(ancestor, destValue, new ArrayList<String>(), toDest);

        // start -> LCA
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < toStart.size(); i++)
            sb.append("U");
        // LCA -> dest
        for (String s : toDest)
            sb.append(s);
        return sb.toString();
    }

    // base LCA
    private TreeNode lowestCommonAncestor(TreeNode root, int p, int q) {
        if (root == null || p == root.val || q == root.val)
            return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if (left != null && right != null)
            return root;
        else
            return left == null ? right : left;
    }

    public void getDirection(TreeNode node, int val, List<String> step, List<String> path) {
        if (node == null)
            return;

        if (node.val == val) {
            path.clear(); // Clear the path list
            path.addAll(step); // Copy the steps to the path
            return;
        }

        if (node.left != null) {
            step.add("L");
            getDirection(node.left, val, step, path);
        }

        if (node.right != null) {
            step.add("R");
            getDirection(node.right, val, step, path);
        }
        step.remove(step.size() - 1);
    }

    private boolean getDirection2(TreeNode ancestor, int value, List<String> steps) {
        if (ancestor == null)
            return false;
        if (ancestor.val == value)
            return true;
        steps.add("L");
        if (getDirection2(ancestor.left, value, steps))
            return true;
        steps.remove(steps.size() - 1);
        steps.add("R");
        if (getDirection2(ancestor.right, value, steps))
            return true;
        steps.remove(steps.size() - 1);
        return false;
    }

}