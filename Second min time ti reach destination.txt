Problem Link - https://leetcode.com/problems/second-minimum-time-to-reach-destination/description/

Problem - A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are 
represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected 
by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes. Each vertex has a traffic signal which changes its color 
from green to red and vice versa every change minutes. All signals change at the same time. You can enter a vertex at any time, but can leave a vertex only when the 
signal is green. You cannot wait at a vertex if the signal is green. The second minimum value is defined as the smallest value strictly larger than the minimum value.
For example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4.
Given n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.
Notes:
a.You can go through any vertex any number of times, including 1 and n.
b.You can assume that when the journey starts, all signals have just turned green.

Intuition - The problem involves finding the second minimum time to traverse from vertex 1 to vertex n in a bidirectional graph, considering that each vertex has traffic 
signals that change from green to red and vice versa every change minutes. We need to account for waiting times at each vertex due to these traffic signals.

Approach - 
1.Graph Representation: Use an adjacency list to represent the graph.
2.Distance Arrays: Use two arrays, dist1 and dist2, to store the shortest and second shortest distances to each node.
3.Frequency Array: Use an array freq to count how often each node is processed from the priority queue.
4.Priority Queue: Use a priority queue to simulate Dijkstra’s algorithm. The queue stores pairs of {distance, node}.
5.Modified Dijkstra’s Algorithm:
• Start from node 1 with a time of 0.
• For each node processed, adjust the current time to account for the traffic signal.
• Update the distances in dist1 and dist2 for each neighboring node.
• Push the updated distances and nodes back into the priority queue.
• If node n is reached for the second time, return the second minimum distance.

class Solution {
    public int secondMinimum(int n, int[][] edges, int time, int change) {
        // Create adjacency list for the graph
        Map<Integer, List<Integer>> adj = new HashMap<>();
        for (int[] edge : edges) {
            int a = edge[0], b = edge[1];
            adj.computeIfAbsent(a, value -> new ArrayList<>()).add(b);
            adj.computeIfAbsent(b, value -> new ArrayList<>()).add(a);
        }

        // Initialize distance arrays and frequency array
        int[] dist1 = new int[n + 1];
        int[] dist2 = new int[n + 1];
        int[] freq = new int[n + 1];

        // Initialize arrays
        for (int i = 1; i <= n; i++) {
            dist1[i] = Integer.MAX_VALUE;
            dist2[i] = Integer.MAX_VALUE;
        }

        // Priority queue for Dijkstra's algorithm
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        pq.offer(new int[]{1, 0});
        dist1[1] = 0;

        while (!pq.isEmpty()) {
            int[] temp = pq.poll();
            int node = temp[0];
            int currentTime = temp[1];

            freq[node]++;

            // If the node is being visited for the second time and is node n, return the answer
            if (freq[node] == 2 && node == n) {
                return currentTime;
            }
        // If the current light is red, wait till the path turns green
            if ((currentTime / change) % 2 == 1) {
                currentTime = change * (currentTime / change + 1) + time;
            } else {
                currentTime = currentTime + time;
            }

            if (!adj.containsKey(node)) {
                continue;
            }

            for (int neighbor : adj.get(node)) {
                // Ignore nodes that have already popped out twice
                if (freq[neighbor] == 2) {
                    continue;
                }

                // Update dist1 if it's more than the current time and store its value in dist2
                if (dist1[neighbor] > currentTime) {
                    dist2[neighbor] = dist1[neighbor];
                    dist1[neighbor] = currentTime;
                    pq.offer(new int[]{neighbor, currentTime});
                } else if (dist2[neighbor] > currentTime && dist1[neighbor] != currentTime) {
                    dist2[neighbor] = currentTime;
                    pq.offer(new int[]{neighbor, currentTime});
                }
            }
        }
        return 0; // If the second minimum distance is not found
    }
}