Problem link - https://leetcode.com/problems/create-binary-tree-from-descriptions/description/?envType=daily-question&envId=2024-07-15

Problem - You are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that parenti is the parent of childi in a binary tree of 
unique values. Furthermore,

If isLefti == 1, then childi is the left child of parenti.
If isLefti == 0, then childi is the right child of parenti.
Construct the binary tree described by descriptions and return its root.

The test cases will be generated such that the binary tree is valid.

Intuition - The given Java code constructs a binary tree from a list of descriptions. Each description specifies a parent node, a child node, and whether the child is a left 
or right child of the parent. Here's a step-by-step explanation of the code:
1. Data Structures:
- A HashMap<Integer, TreeNode> called map to store the TreeNode objects by their values.
- A Set called children to keep track of all child nodes.
2. Populating the Data Structures:
- The code iterates over each description in the input array.
- For each description, it extracts the parent value (parent), the child value (child), and whether the child is a left child (isLeft).
- It adds the child value to the children set.
- It retrieves the parent node from the map, or creates a new TreeNode if it doesn't exist.
- Depending on whether the child is left or right (isLeft), it sets the appropriate child reference (left or right) in the parent node.
- It puts both the parent and child nodes into the map.
3. Identifying the Root:
- After processing all descriptions, the code determines the root of the tree by finding a node that is not in the children set.
- The root node is a node that appears as a parent in the descriptions but never as a child.
4. Returning the Root:
- The code retrieves and returns the root node from the map.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode createBinaryTree(int[][] descriptions) {
        HashMap<Integer, TreeNode> map = new HashMap<>();
        Set<Integer> children = new HashSet<>();
        for (int[] arr : descriptions) {
            int parent = arr[0], child = arr[1], isLeft = arr[2];
            children.add(child);
            TreeNode node = map.getOrDefault(parent, new TreeNode(parent));
            if (isLeft == 1) {
                node.left = map.getOrDefault(child, new TreeNode(child));
                map.put(child, node.left);
            } else {
                node.right = map.getOrDefault(child, new TreeNode(child));
                map.put(child, node.right);
            }
            map.put(parent, node);
        }
        
        int root = -1;
        for (int [] arr: descriptions) {
            if (!children.contains(arr[0])) {
                root = arr[0];
                break;
            }
        }
        
        return map.getOrDefault(root, null);
    }
}