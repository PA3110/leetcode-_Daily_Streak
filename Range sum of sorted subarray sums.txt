Problem Link - https://leetcode.com/problems/range-sum-of-sorted-subarray-sums/

Problem - You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then 
sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers. Return the sum of the numbers from index left to index right (indexed 
from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.

Inuition - 
1.Generating all subarray sums for a given array would require scanning through all possible starting points of subarrays and summing up the elements until 
it reaches the end.
These subarray sums shall be stored in a list or array.
2.Sorting: After generating all the subarray sums, sort them in non-decreasing order.
3.Range Sum Calculation: compute sum of those subarray sums which fall in the given range [left, right] â€” 1-based indexing. So convert it to 0-based indexing 
for array access.
Since the result can be large, take modulo (10**9)+7 of the sum.

class Solution {
    public int rangeSum(int[] nums, int n, int left, int right) {
        int[] arr = new int[n * (n + 1) / 2];
        for (int i = 0, k = 0; i < n; ++i) {
            int s = 0;
            for (int j = i; j < n; ++j) {
                s += nums[j];
                arr[k++] = s;
            }
        }
        Arrays.sort(arr);
        int ans = 0;
        final int mod = (int) 1e9 + 7;
        for (int i = left - 1; i < right; ++i) {
            ans = (ans + arr[i]) % mod;
        }
        return ans;
    }
}