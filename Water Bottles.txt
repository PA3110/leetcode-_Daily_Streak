Problem Link - https://leetcode.com/problems/water-bottles/?envType=daily-question&envId=2024-07-07

Problem - There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.
The operation of drinking a full water bottle turns it into an empty bottle. Given the two integers numBottles and numExchange, return the maximum number of water bottles 
you can drink.

Intuition - Approach:
Initialize: Start with numBottles full bottles that you can drink.
Loop Until No More Exchanges: Continue exchanging bottles as long as you have enough empty bottles (numBottles) to exchange for a new full bottle (numBottles >= numExchange).

Exchange Bottles:
Calculate how many new full bottles you can get by exchanging the empty ones (newBottles = numBottles / numExchange).
Calculate how many empty bottles will remain after the exchange (remBottles = numBottles % numExchange).

Update Total Bottles:
Add the new full bottles to the total count (ans).
Set numBottles to the sum of the new full bottles and the remaining empty bottles for the next iteration (numBottles = newBottles + remBottles).

Return Total: Once no more exchanges can be made, return the total number of bottles consumed (ans).

Example:
Let's take an example where numBottles = 9 and numExchange = 3.

Initial State:

numBottles = 9
numExchange = 3
ans = 9 (initial number of bottles you can drink)

First Exchange:
newBottles = 9 / 3 = 3 (You can exchange 9 empty bottles for 3 full bottles)
remBottles = 9 % 3 = 0 (No remaining empty bottles)
ans = 9 + 3 = 12 (Total bottles consumed so far)
numBottles = 3 + 0 = 3 (New state for the next iteration)

Second Exchange:
newBottles = 3 / 3 = 1 (You can exchange 3 empty bottles for 1 full bottle)
remBottles = 3 % 3 = 0 (No remaining empty bottles)
ans = 12 + 1 = 13 (Total bottles consumed so far)
numBottles = 1 + 0 = 1 (New state for the next iteration)

Termination:
Now numBottles = 1 is less than numExchange = 3, so no more exchanges can be made.
Return ans = 13.

class Solution {
    public int numWaterBottles(int numBottles, int numExchange) {
        int ans=numBottles;
        while (numBottles>=numExchange) {
            int newBottles=numBottles/numExchange;
            int remBottles=numBottles%numExchange;
            ans=ans+newBottles;
            numBottles=newBottles+remBottles;
        }
        return ans;
    }
}