Problem Link - https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together-ii/solutions/5571652/same-concept-of-sliding-window-o-n-in-3-langs-margin-94/

Problem - A swap is defined as taking two distinct positions in an array and swapping the values in them.
A circular array is defined as an array where we consider the first element and the last element to be adjacent.
Given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.

Intuition - 
1.Counting 1s (k):
First, the code calculates the total number of 1s in the array, denoted by k. This is because the task is to find the smallest window (or segment) of size k that contains 
the maximum number of 1s.
2.Initial Window Calculation:
The code then computes the number of 1s in the first window of size k. This is achieved by summing up the first k elements of the array. This sum is stored in the variable 
cnt and also in mx (as the initial maximum count of 1s in any window).
3.Sliding Window Technique:
The core part of the solution involves a sliding window approach to move through the array and calculate the number of 1s in each window of size k.
For each step from i = k to i = n + k - 1 (where n is the length of the array):
The code updates the cnt by adding the next element in the window (nums[i % n]) and removing the element that is sliding out of the window (nums[(i - k + n) % n]).
The maximum number of 1s found in any window of size k is updated in mx.
4.Result Calculation:
Finally, the result is derived as k - mx, which represents the minimum number of swaps needed. This is because k is the total number of 1s, and mx is the maximum number of 
1s found in any window of size k. Therefore, the difference k - mx gives the minimum number of 0s that need to be swapped with 1s to achieve the desired grouping of 1s.